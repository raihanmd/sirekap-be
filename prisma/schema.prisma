// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  REGISTERED_USER
}

enum CandidatesType {
  PRESIDEN
  WAKIL_PRESIDEN
  DPR
  DPRD
  DPD
}

model Province {
  id   Int    @id @db.UnsignedMediumInt()
  name String @db.VarChar(50)

  city          City[]
  user          User[]
  candidates    Candidates[]
  voting_events VotingEvents[]

  @@map("provinces")
}

model City {
  id          Int    @id @db.UnsignedMediumInt()
  province_id Int    @db.UnsignedMediumInt()
  name        String @db.VarChar(50)

  province      Province       @relation(fields: [province_id], references: [id])
  user          User[]
  candidates    Candidates[]
  voting_events VotingEvents[]

  @@map("cities")
}

model User {
  id            String   @id @default(cuid()) @db.Char(36)
  province_id   Int      @db.UnsignedMediumInt()
  city_id       Int      @db.UnsignedMediumInt()
  username      String   @db.VarChar(15)
  full_name     String   @db.VarChar(255)
  password      String   @db.VarChar(255)
  role          UserRole @default(REGISTERED_USER)
  token         String?  @db.VarChar(255)
  date_of_birth Int      @db.Int()

  province Province    @relation(fields: [province_id], references: [id])
  city     City        @relation(fields: [city_id], references: [id])
  votes    VotingLog[]

  @@map("users")
}

model PoliticalParties {
  id        String @id @default(cuid()) @db.Char(36)
  name      String @unique @db.VarChar(50)
  image     String @db.VarChar(255)
  public_id String @db.VarChar(255)

  candidates Candidates[]

  @@map("political_parties")
}

model Candidates {
  id               String         @id @default(cuid()) @db.Char(36)
  voting_events_id Int
  party_id         String         @db.Char(36)
  province_id      Int            @db.UnsignedMediumInt()
  city_id          Int            @db.UnsignedMediumInt()
  name             String         @db.VarChar(255)
  image            String         @db.VarChar(255)
  public_id        String         @db.VarChar(255)
  type             CandidatesType

  voting_events VotingEvents     @relation(fields: [voting_events_id], references: [id])
  party         PoliticalParties @relation(fields: [party_id], references: [id])
  province      Province         @relation(fields: [province_id], references: [id])
  city          City             @relation(fields: [city_id], references: [id])
  voting_log    VotingLog[]

  @@unique([province_id, city_id, party_id, type])
  @@map("candidates")
}

model VotingEvents {
  id          Int            @id @default(autoincrement())
  province_id Int            @db.UnsignedMediumInt()
  city_id     Int            @db.UnsignedMediumInt()
  start_time  Int            @db.Int()
  end_time    Int            @db.Int()
  type        CandidatesType

  province   Province     @relation(fields: [province_id], references: [id])
  city       City         @relation(fields: [city_id], references: [id])
  votes      VotingLog[]
  candidates Candidates[]

  @@map("voting_events")
}

model VotingLog {
  id              BigInt       @id @default(autoincrement())
  user_id         String       @db.Char(36)
  voting_event_id Int
  candidate_id    String       @db.Char(36)
  date            Int
  user            User         @relation(fields: [user_id], references: [id])
  event           VotingEvents @relation(fields: [voting_event_id], references: [id])
  candidate       Candidates   @relation(fields: [candidate_id], references: [id])

  @@map("voting_log")
}
